name: Ci-pipeline, Docker image, push to GAR.
on:
  push:
    branches: [ dev-branch-1 ]
    # - '.github/workflows/*yaml'
    paths-ignore:
      - '**.md'
      - 'readme/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
           
  workflow_dispatch:

env:
  GAR_INFO: northamerica-northeast2-docker.pkg.dev/thedevproj/tdpartifs
  CART_APP_NAME: rs-cart
  SHIPPING_APP_NAME: rs-shipping
  CATALOGUE_APP_NAME: rs-catalogue
  DISPATCH_APP_NAME: rs-dispatch
  MONGO_APP_NAME: rs-mongodb
  MYSQL_APP_NAME: rs-mysql-db
  PAYMENT_APP_NAME: rs-payment
  RATINGS_APP_NAME: rs-ratings
  USER_APP_NAME: rs-user
  WEB_APP_NAME: rs-web
  REDIS_APP_NAME: redis
  RABBITMQ_APP_NAME: rabbitmq

jobs:

  build-cart:
    name: Building CART IMAGE
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat cart/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$CART_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$CART_APP_NAME":"$TAG" cart/
          gcloud info
          docker push "$GAR_INFO"/"$CART_APP_NAME":"$TAG"
  
  build-catalogue:
    name: Building CATALOGUE IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat catalogue/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$CATALOGUE_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$CATALOGUE_APP_NAME":"$TAG" catalogue/
          gcloud info
          docker push "$GAR_INFO"/"$CATALOGUE_APP_NAME":"$TAG"
  
  build-dispatch:
    name: Building DISPATCH IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat dispatch/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$DISPATCH_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$DISPATCH_APP_NAME":"$TAG" dispatch/
          gcloud info
          docker push "$GAR_INFO"/"$DISPATCH_APP_NAME":"$TAG"
  build-mongo:
    name: Building MONGODB IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat mongo/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$MONGO_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$MONGO_APP_NAME":"$TAG" mongo/
          gcloud info
          docker push "$GAR_INFO"/"$MONGO_APP_NAME":"$TAG"
  
  build-mysql:
    name: Building MYSQL-DB IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat mysql/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$MYSQL_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$MYSQL_APP_NAME":"$TAG" mysql/
          gcloud info
          docker push "$GAR_INFO"/"$MYSQL_APP_NAME":"$TAG"
  
  build-payment:
    name: Building PAYMENT IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat payment/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$PAYMENT_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$PAYMENT_APP_NAME":"$TAG" payment/
          gcloud info
          docker push "$GAR_INFO"/"$PAYMENT_APP_NAME":"$TAG"
  
  build-ratings:
    name: Building RATINGS IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat ratings/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$RATINGS_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$RATINGS_APP_NAME":"$TAG" ratings/
          gcloud info
          docker push "$GAR_INFO"/"$RATINGS_APP_NAME":"$TAG"
  build-shipping:
    name: Building SHIPPING IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                       
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      - name: Run Wiremock server
        #uses: docker://wiremock/wiremock:2.33.1 
        #with:
        #  args: >-
        #    --publish: 9999:8080
        #    --name: wiremock
        #    --rm
        #    -it

       
        run: |
          cd shipping
          docker run -d -p 8080:8080 -v $PWD/src/test/resources:/home/wiremock --name wiremock wiremock/wiremock:2.33.1
          docker container inspect wiremock
          echo `docker container port wiremock`
          mvn test
    # curl -LIs http://localhost:8080
      - name: Publish Wiremock Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: "shipping/target/surefire-reports/junitreports/*.xml"
       
      - name: Build-and-push-to-GAR
        run: |
          echo `pwd`
          export TAG=`cat shipping/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$SHIPPING_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$SHIPPING_APP_NAME":"$TAG" shipping/
          gcloud info
          docker push "$GAR_INFO"/"$SHIPPING_APP_NAME":"$TAG"
  build-user:
    name: Building USER IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat user/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$USER_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$USER_APP_NAME":"$TAG" user/
          gcloud info
          docker push "$GAR_INFO"/"$USER_APP_NAME":"$TAG"
  build-web:
    name: Building WEB IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                        
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat web/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$WEB_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$WEB_APP_NAME":"$TAG" web/
          gcloud info
          docker push "$GAR_INFO"/"$WEB_APP_NAME":"$TAG"
  
  build-redis:
    name: Building Redis IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                        
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat redis/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$REDIS_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$REDIS_APP_NAME":"$TAG" redis/
          gcloud info
          docker push "$GAR_INFO"/"$REDIS_APP_NAME":"$TAG"
  build-rabbitmq:
    name: Building RabbitMQ IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                        
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat rabbitmq/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$RABBITMQ_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$RABBITMQ_APP_NAME":"$TAG" rabbitmq/
          gcloud info
          docker push "$GAR_INFO"/"$RABBITMQ_APP_NAME":"$TAG"

  deploy-to-gcp-learn:
    name: Deploy to GCP learn env
    needs: [build-cart,build-catalogue,build-dispatch,build-mongo,build-mysql,build-payment,build-rabbitmq,build-ratings,build-redis,build-shipping,build-user,build-web]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
                        
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Call Google Cloud Deploy
        run: |
         cd K8s
         date_var=`date +%m%d%y-%H%M`
         echo "date_var=$date_var" >> $GITHUB_ENV
         gcloud deploy releases create rel-$date_var --delivery-pipeline=robot-shop --region=us-central1
      
      - name: verify if the rollout is success
        run: |
         gcloud deploy rollouts describe rel-${{ env.date_var }}-to-learn-0001 --release=rel-${{ env.date_var }} --delivery-pipeline=robot-shop --region=us-central1
         sleep 60
         counter=0
         while [ $counter -lt 20 ]
         do
         export some_val=`gcloud deploy rollouts describe rel-${{ env.date_var }}-to-learn-0001 --release=rel-${{ env.date_var }} --delivery-pipeline=robot-shop --region=us-central1 | grep state: | cut -f2 -d: | cut -d' ' -f2`
         if [ "$some_val" == "IN_PROGRESS" ]
         then
           echo "Deployment in Progress Time is: `date`"
             sleep 30
             continue
         elif [ "$some_val" == "SUCCEEDED" ]
         then
           echo "Deployment is Succeeded Time is: `date`	"
             exit 0
         else
           echo "Deployment Failed Time is: `date`"
             exit 1
         fi
           counter=$(( $counter + 1))
         
           done